<?php

require_once dirname(__FILE__) . '/cstore.theme.inc';

/**
 * Implements hook_menu().
 */
function cstore_menu() {
  $items['admin/config/cstore'] = array(
    'title' => 'Cupcakes store settings',
    'description' => 'Cupcakes store settings',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/cstore/settings'] = array(
    'title' => 'General settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cstore_admin_form'),
    'access arguments' => array('cstore admin'),
    'file' => 'cstore.admin.inc',
  );

  $items['admin/config/cstore/theming'] = array(
    'title' => 'Theming settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cstore_admin_theming_form'),
    'access arguments' => array('cstore admin'),
    'file' => 'cstore.admin.inc',
  );


  $items['cart'] = array(
    'title' => 'Your shopping cart',
    'description' => 'The shopping cart page',
    'page callback' => 'cstore_cart',
    'access arguments' => array('use cupcakes store'),
    'type' => MENU_CALLBACK,
    'file' => 'cstore.cart.inc',
  );

  $items['cart/add'] = array(
    'title' => 'Add to cart',
    'description' => 'Add to cart url.',
    'page callback' => 'cstore_add_to_cart',
    'access arguments' => array('use cupcakes store'),
    'type' => MENU_CALLBACK,
    'file' => 'cstore.cart.inc',
  );

  $items['cart/remove'] = array(
    'title' => 'Remove from cart',
    'description' => 'Remove from cart url.',
    'page callback' => 'cstore_remove_from_cart',
    'access arguments' => array('use cupcakes store'),
    'type' => MENU_CALLBACK,
    'file' => 'cstore.cart.inc',
  );
  
  $items['checkout'] = array(
    'title' => 'Checkout',
    'description' => 'Checkout.',
    'page callback' => 'cstore_order_checkout',
    'page arguments' => array('cstore_order_checkout_form'),
    'access arguments' => array('use cupcakes store'),
    'type' => MENU_CALLBACK,
    'file' => 'cstore.order.inc',
  );
  
  $items['checkout/done'] = array(
    'title' => 'Thank you',
    'description' => 'Checkout thank you page.',
    'page callback' => 'cstore_order_checkout_done',
    'access arguments' => array('use cupcakes store'),
    'type' => MENU_CALLBACK,
    'file' => 'cstore.order.inc',
  );

  return $items;
}

/**
 * Returns the fields we need to create.
 * 
 * @return mixed
 *   Key / Value pair of field name => field type. 
 */
function cstore_get_fields() {
  return array(
    'field_ingredients' => array(
      'type' => 'text',
      'title' => t('Ingredients'),
      'description' => t('Please enter the list of ingredients.'),
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    ),
    'field_price' => array(
      'type' => 'number_decimal',
      'title' => t('Price'),
      'description' => t('Please enter this item\'s price.'),
    ),
    'field_discount' => array(
      'type' => 'number_decimal',
      'title' => t('Price with discount'),
      'description' => t('Please enter this item\'s discount.'),
    ),
    'field_add_to_cart' => array(
      'type' => 'text',
      'title' => 'Add to cart',
      'description' => '',
    ),
  );
}

/**
 * Helper function. Returns an array of types.
 */
function cstore_product_types() {
  static $types;

  if (empty($types)) {
    $types = variable_get('cstore_content_types', array());
  }

  return $types;
}

/**
 * Implements hook_form_alter().
 * 
 * Used for removing the add to cart text field from the node/add or node/edit form.
 */
function cstore_form_alter(&$form, &$form_state, $form_id) {
  $types = cstore_product_types();

  if (!empty($types) && is_array($types)) {
    $types_ = array();
    foreach ($types as $value) {
      $types_[] = $value . '_node_form';
    }

    // Check if we are on a product content type.
    if (in_array($form_id, $types_)) {
      // We are - hiding the add to cart field.
      unset($form['field_add_to_cart']);
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function cstore_field_formatter_info() {
  $info = array(
    'cstore_add_to_cart' => array(
      'label' => t('Add to cart button'),
      'field types' => array('text'),
      'description' => t('Adds an add to cart button.'),
      'settings' => array(
        'css_class' => 'btn cstore-add-to-cart-btn',
      ),
    ),
  );
  return $info;
}

function cstore_preprocess_field(&$variables, $hook) {
  $field = $variables['element'];
  if ($field['#field_name'] == 'field_add_to_cart') {
    $variables['items'][] = $field[0];
  }
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function cstore_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();

  switch ($display['type']) {
    case 'cstore_add_to_cart':
      $element['css_class'] = array(
        '#type' => 'textfield',
        '#title' => t('CSS class'),
        '#description' => t('This class will be added to the button\'s HTML code.'),
        '#default_value' => $settings['css_class'],
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function cstore_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';

  switch ($display['type']) {
    case 'cstore_add_to_cart':
      $summary = t('Classes for add to cart button: "@css_class"', array('@css_class' => $settings['css_class']));
      break;
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function cstore_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'cstore_add_to_cart':
      if (!empty($items) && is_array($items)) {
        foreach ($items as $delta => $item) {
          $css_class = !empty($settings['css_class']) ? $settings['css_class'] : '';
          $element[$delta] = array(
            '#markup' => theme('cstore_add_to_cart', array(
              'path' => 'cart/add/' . $entity->nid,
              'css_class' => $css_class,
            )),
          );
        }
      }
      else {
        $css_class = !empty($settings['css_class']) ? $settings['css_class'] : '';
        $element[] = array(
          '#markup' => theme('cstore_add_to_cart', array(
            'path' => 'cart/add/' . $entity->nid,
            'css_class' => $css_class,
          )),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function cstore_theme() {
  return array(
    'cstore_add_to_cart' => array(
      'function' => 'cstore_add_to_cart_button',
      'variables' => array('path' => NULL, 'css_class' => NULL),
    ),
    'cstore_render_cart_element' => array(
      'render element' => 'form',
    ),
    'cstore_cart_total_price' => array(
      'variables' => array('price' => NULL),
    ),
  );
}
